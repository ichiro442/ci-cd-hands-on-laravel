AWSTemplateFormatVersion: 2010-09-09

Description: 
  'Hands-on Environment template'

Parameters:

  VpcCIDR: 
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.192.0.0/16

  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.192.1.0/24

  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.192.2.0/24

  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.192.129.0/24

  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 10.192.130.0/24

  PHPContainerImage:
    Description: Please enter container image for ECS.
    Type: String
    Default: 738965884675.dkr.ecr.ap-northeast-1.amazonaws.com/ci-cd-hands-on:laravel

  NginxContainerImage:
    Description: Please enter container image for ECS.
    Type: String
    Default: 738965884675.dkr.ecr.ap-northeast-1.amazonaws.com/ci-cd-hands-on:nginx

  DBDatabase:
    Description: Please enter database name.
    Type: String
    Default: homestead

  DBUsername:
    Description: Please enter database master username
    Type: String
    Default: homestead

  DBPassword:
    Description: Please enter database password
    Type: String
    Default: password
    NoEcho: true

Resources:
  ECRRepository:
    Type: "AWS::ECR::Repository"

  ImageRepositoryName: 
    Type: "AWS::SSM::Parameter"
    Properties: 
      Name: IMAGE_REPOSITORY_NAME
      Description: image repository name
      Type: String
      Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepository}

  ## VPC and Subnets and so on...
  VPC: 
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR 
      Tags:
        - Key: Name
          Value: demo-infra-VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: demo-infra-InternetGateway

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1: 
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: demo-infra-PublicSubnet1

  PublicSubnet2: 
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: demo-infra-PublicSubnet2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      Tags:
        - Key: Name
          Value: demo-infra-PrivateSubnet1

  PrivateSubnet2: 
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet2CIDR
      Tags:
        - Key: Name
          Value: demo-infra-PrivateSubnet2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: demo-infra-PublicRouteTable

  DefaultPublicRoute: 
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties: 
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2
  
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: demo-infra-PrivateRouteTable

  DefaultPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2

  NatGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties: 
      Domain: vpc
  
  NatGateway: 
    Type: AWS::EC2::NatGateway
    Properties: 
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: demo-infra-NatGateway

  FargateSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "fargate-sg"
      GroupDescription: "Security group with ingress rule from lb"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          SourceSecurityGroupId: !Ref ALBSecurityGroup
      Tags:
        - Key: Name
          Value: demo-infra-FargateSecurityGroup
  
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "alb-sg"
      GroupDescription: Access to the public facing load balancer
      VpcId: !Ref 'VPC'
      SecurityGroupIngress:
          - CidrIp: 0.0.0.0/0
            IpProtocol: -1
      Tags:
        - Key: Name
          Value: demo-infra-ALBSecurityGroup
  
  RdbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "rdb-sg"
      GroupDescription: "Security group with ingress rule from fargate"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          SourceSecurityGroupId: !Ref FargateSecurityGroup
      Tags:
        - Key: Name
          Value: demo-infra-RdbSecurityGroup

  ## ECS Resources
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties: 
      ClusterName: !Sub ${AWS::StackName}-ECSCluster

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-ECSTaskExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-ECSTaskRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-ECSTaskRolePolicy
          PolicyDocument: 
            Version: '2012-10-17'
            Statement:
            - Sid: ''
              Effect: Allow
              Action:
                - ssm:DescribeParameters
                - ssm:Get*
              Resource: "*"
            - Sid: ''
              Effect: Allow
              Action:
                - kms:Decrypt
              Resource:
                - !Sub arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/*

  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Cpu: 256
      Memory: 0.5GB
      Family: !Sub ${AWS::StackName}-Task
      NetworkMode: awsvpc
      RequiresCompatibilities: 
        - FARGATE
      TaskRoleArn: !GetAtt  ECSTaskRole.Arn
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: phpfpm
          Image: !Ref PHPContainerImage
          PortMappings: 
            - ContainerPort: 9000
              Protocol: tcp
          LogConfiguration: 
            LogDriver: "awslogs"
            Options: 
              "awslogs-group": !Ref ECSLogGroup
              "awslogs-region": !Ref AWS::Region 
              "awslogs-stream-prefix": "awslogs-phpfpm"
          Environment:
            - Name: AWS_ENV_PATH
              Value: /demo/app/phpfpm/
            - Name: AWS_REGION
              Value: !Ref AWS::Region
        - Name: nginx
          Image: !Ref NginxContainerImage
          PortMappings:
            - ContainerPort: 80
          LogConfiguration: 
            LogDriver: "awslogs"
            Options: 
              "awslogs-group": !Ref ECSLogGroup
              "awslogs-region": !Ref AWS::Region
              "awslogs-stream-prefix": "awslogs-nginx"
          Environment:
            - Name: AWS_ENV_PATH
              Value: /demo/app/nginx/
            - Name: AWS_REGION
              Value: !Ref AWS::Region

  DBHostParameter: 
    Type: "AWS::SSM::Parameter"
    Properties: 
      Name: /demo/app/phpfpm/DB_HOST
      Description: DB host name
      Type: String
      Value: !GetAtt PostgresInstance.Endpoint.Address
  DBPortParameter: 
    Type: "AWS::SSM::Parameter"
    Properties: 
      Name: /demo/app/phpfpm/DB_PORT
      Description: DB port
      Type: String
      Value: !GetAtt PostgresInstance.Endpoint.Port
  DBDatabaseParameter: 
    Type: "AWS::SSM::Parameter"
    Properties: 
      Name: /demo/app/phpfpm/DB_DATABASE
      Description: DB database name
      Type: String
      Value: !Ref DBDatabase
  DBUsernameParameter:
    Type: "AWS::SSM::Parameter"
    Properties: 
      Name: /demo/app/phpfpm/DB_USERNAME
      Description: DB user name
      Type: String
      Value: !Ref DBUsername
  DBPasswordParameter:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: /demo/app/phpfpm/DB_PASSWORD
      Description: DB password
      Type : String
      Value: !Ref DBPassword

  AppServerHostParameter:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: /demo/app/nginx/APP_SERVER_HOST
      Description: phpfpm server host
      Type : String
      Value: localhost
  AppServerPortParameter:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: /demo/app/nginx/APP_SERVER_PORT
      Description: phpfpm server port
      Type : String
      Value: "9000"

  ECSLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: !Sub /ecs/${AWS::StackName}-log-group
      RetentionInDays: 1
          
  ECSService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub ${AWS::StackName}-ECSService
      Cluster: !GetAtt ECSCluster.Arn
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref FargateSecurityGroup
          Subnets:
              - !Ref PrivateSubnet1
              - !Ref PrivateSubnet2
      TaskDefinition: !Ref ECSTaskDefinition
      LoadBalancers:
        - ContainerName: nginx
          ContainerPort: 80
          TargetGroupArn: !Ref TargetGroup
    DependsOn: 
      - LoadBalancerListener
      - DBHostParameter
      - DBPortParameter
      - DBDatabaseParameter
      - DBUsernameParameter
      - DBPasswordParameter
      - AppServerHostParameter
      - AppServerPortParameter

  ## ALB Resources
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: '30'
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups: [!Ref 'ALBSecurityGroup']

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 5
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 3
      HealthyThresholdCount: 2
      TargetType: ip
      Name: !Sub ${AWS::StackName}-TargetGroup
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: !Ref VPC   

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP
  
  ## Code Build Service Role(Default + ECR Push)
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-CodeBuild-ServiceRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-CodeBuild-ServiceRolePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: ECRPowerUserPolicy
                Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:GetRepositoryPolicy
                  - ecr:DescribeRepositories
                  - ecr:ListImages
                  - ecr:DescribeImages
                  - ecr:BatchGetImage
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload
                  - ecr:PutImage
                Resource:
                  - "*"
              - Sid: SSMParameter
                Action:
                  - ssm:GetParameters
                Effect: Allow
                Resource: 
                  - "*"
  
  CodeBuildCacheBucket:
    Type: AWS::S3::Bucket
    
  PostgresInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      VPCSecurityGroups:
        - !Ref RdbSecurityGroup
      AllocatedStorage: '5'
      DBInstanceClass: db.t2.micro
      Engine: postgres
      EngineVersion: 10.4
      DBName: !Ref DBDatabase
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      DBSubnetGroupName: !Ref PostgresDBSubnetGroup
    DeletionPolicy: Delete

  PostgresDBSubnetGroup: 
    Type: AWS::RDS::DBSubnetGroup
    Properties: 
      DBSubnetGroupDescription: DB instances are in private subnet
      SubnetIds: 
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

Outputs:
  ALBDNSName:
    Description: Endpoint URL of ALB
    Value: !Sub http://${ALB.DNSName}
  ImageRepositoryName: 
    Description: Repository for the image built with CodeBuild
    Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepository}
  CodeBuildServiceRole:
    Description: CodeBuild service role
    Value: !Ref CodeBuildServiceRole
  ECSClusterName:
    Description: Cluster Name of ECS
    Value: !Ref ECSCluster
  ECSServiceName:
    Description: Service Name of ECS
    Value: !GetAtt ECSService.Name
  CodeBuildCachePlace:
    Description: Cache Place of CodeBuild in S3 Cache Bucket
    Value: !Sub s3://${CodeBuildCacheBucket}/build-cache
